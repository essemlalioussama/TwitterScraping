[{"/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/index.js":"1","/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/App.js":"2","/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/components/Map.js":"3","/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/components/Slider.js":"4","/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/components/Search.js":"5","/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/components/Header.js":"6"},{"size":146,"mtime":1643664967811,"results":"7","hashOfConfig":"8"},{"size":1171,"mtime":1643667936543,"results":"9","hashOfConfig":"8"},{"size":1902,"mtime":1643666894152,"results":"10","hashOfConfig":"8"},{"size":1274,"mtime":1643669017509,"results":"11","hashOfConfig":"8"},{"size":1306,"mtime":1643668037611,"results":"12","hashOfConfig":"8"},{"size":275,"mtime":1643664967810,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7df31w",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/index.js",[],"/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/App.js",[],["30","31"],"/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/components/Map.js",["32"],"import React, { useState } from \"react\";\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  Marker,\n  InfoWindow\n} from \"react-google-maps\";\nimport mapStyles from \"../mapStyles.json\";\n\nfunction Map({searchResult, selectedProperty, setSelectedProperty, setTweetsResult}) {\n\n  const WrappedMap = withScriptjs(\n    withGoogleMap(() =>\n      <GoogleMap\n        defaultZoom={5.5}\n        defaultCenter={{ lat: 47.3170042, lng: 3.6048264 }}\n        options={{ styles: mapStyles }}\n      >\n        {searchResult && searchResult.map(property =>\n          <Marker\n            key={property.id}\n            position={{\n              lat: property.lat,\n              lng: property.lng\n            }}\n            icon={{\n              url: \"https://twimap.com/logo.png\",\n              scaledSize: new window.google.maps.Size(28, 28)\n            }}\n            onClick={() => {\n              setSelectedProperty(property);\n              setTweetsResult(null);\n            }}\n          />\n        )}\n\n        {selectedProperty &&\n          <InfoWindow\n            position={{\n              lat: selectedProperty.lat,\n              lng: selectedProperty.lng\n            }}\n            onCloseClick={() => {\n              setSelectedProperty(null);\n              setTweetsResult(null);\n            }}\n          >\n            <div>\n              <h5>\n                {selectedProperty.name} : {selectedProperty.count}\n              </h5>\n            </div>\n          </InfoWindow>}\n      </GoogleMap>\n    )\n  );\n\n  return (\n    <WrappedMap\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyCVc5BV5f51pj4r0K3RhGy4EDVGFKyGfqo`}\n        loadingElement={<div style={{ height: \"100%\" }} />}\n        containerElement={<div style={{ height: \"100%\" }} />}\n        mapElement={<div style={{ height: \"100%\" }} />}\n      />\n      \n  );\n}\n\nexport default Map;\n",["33","34"],"/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/components/Slider.js",["35"],"import React, { useState } from \"react\";\n\nfunction Tweet(tweet) {\n  console.log(tweet);\n  return (\n    <div class=\"tweet-wrap\">\n      <div class=\"tweet-header\">\n        <div class=\"tweet-header-info\">\n          {tweet.tweet.name} <span>@{tweet.tweet.username}</span>\n          <span>. {tweet.tweet.datestamp}</span>\n          <p>{tweet.tweet.tweet}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Slider(props) {\n\n  function handleClick(city) {\n    const url = \"http://localhost:9000/tweets/\";\n    fetch(url.concat(city.name).concat('?topic=').concat(props.searchTopic).concat('&limit=').concat(city.count))\n      .then(res => res.json())\n      .then(result => props.setTweetsResult(result.tweets));\n  }\n\n  return (\n    <div id=\"slider\">\n      <h4 id=\"titreTweets\">Vous pouvez voir toutes les tweets :</h4>\n      {props.selectedCity\n        ? props.tweetsResult\n          ? props.tweetsResult.map(tweet => <Tweet tweet={tweet} />)\n          : <button\n              id=\"tweetsButton\"\n              onClick={() => handleClick(props.selectedCity)}\n            >\n              Voir les tweets dans {props.selectedCity.name}\n            </button>\n        : <p id=\"villeMsg\">Veuillez chercher un sujet et selectionner une ville !</p>}\n    </div>\n  );\n}\n","/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/components/Search.js",[],"/Users/essemllalioussama/Desktop/Twitter_projet/TweetMap/src/components/Header.js",["36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":25},{"ruleId":"37","replacedBy":"45"},{"ruleId":"39","replacedBy":"46"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":25},{"ruleId":"47","severity":1,"message":"48","line":7,"column":13,"nodeType":"49","endLine":7,"endColumn":43},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["50"],["51"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]